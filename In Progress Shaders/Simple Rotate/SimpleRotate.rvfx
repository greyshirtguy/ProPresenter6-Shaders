<name:"Simple Rotate" /name>
<uuid:"8D82F424-A3C8-4DC2-9D0E-A0B96B53FAA3" /uuid>
<desc:"Rotate and auto-scale to fit output" /desc>
//<iconFilename: "AdjustColor.jpg"
<shaderFile:"SimpleRotate"
<auxStream:
<customGeomFile:
<type:0
<numPasses:1 /numPasses>
<usesAux:0
<usesAudio:0
<usesFA:0
<usesFB:0
<usesFL:0
<usesInA:0
<usesInB:0
<var:"QtrRotations" label:"Qtr Rotations" desc:"Adjust Rotation" type:1 min:0,0,0,0 max:3,3,3,3 defValue:0.,0.,0.,0 value:0.,0.,0.,0. /var>
<var:"Scale" label:"Scale" desc:"Adjust Scale" type:1 min:0,0,0,0 max:5,5,5,5 defValue:1,1,1,1 value:1,1,1,1 /var>


//        char *name;                 //cannot have spaces or special characters
//        char *desc;
//        char *iconFilename;
//        char *vertexShaderFile;
//        char *fragmentShaderFile;
//        char *auxStream;            //optional, file or url for aux input, can be audio only
//        char *customGeomFile;       //optional, file for geometery to use
//        int type;                   //0=transition, 1=fx
//        int numModes;               //can be zero
//        ssFXModeType *modes;        //array of modes
//        int numVars;                //number of variables global to the effect
//        ssFXVarType *vars;          //array of variables
//        bool usesAux;               //uses the aux stream
//        bool usesInA;               //uses A input
//        bool usesInB;               //uses B input
//        bool usesFA;                //uses Feedback Channel A
//        bool usesFB;                //uses Feedback Channel B
//        bool usesFL;                //uses Feedback Channel for the Layer
//        int usesAudio;              //0=no audio, 1=audio of video, 2=audio of auxStream, 3=audio of renderer
